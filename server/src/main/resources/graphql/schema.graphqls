type Query {
    getServerInfo: ServerInfo
    episodesRecentWatched: [Episode!]
    episodeById(id: ID): Episode
    seasonById(id: ID): Season
    shows(page: Int, size: Int, sorting: SortingEnum, sortingOrder: SortingOrder): ShowPage
    moviesRecentAdded: [Movie!]
    movieById(id: ID): Movie
    showById(id: ID): Show
    getPlayQueue(id: ID!): PlayQueue
}

type Mutation {
    scanLibrary: Boolean!
    analyzeLibrary: Boolean!
    createPlayQueueForShow(showId: ID!, episodeId: ID!): PlayQueue!
    createPlayQueueForMovie(movieId: ID!): PlayQueue!
    updatePlayQueue(id: ID!, progressInMilliseconds: Int!, playQueueItemId: ID!): PlayQueue
    startTranscoding(playQueueId: ID!, mediaFileId: ID!, startTimeInSeconds: Int!, audioId: ID, subtitleId: ID): ID!
    readyTranscoding(id: ID!): Boolean!
    stopTranscoding(id: ID!): Boolean!
}

enum SortingEnum {
    DATE_CREATED
    NAME
}

enum SortingOrder {
    DESCENDING
    ASCENDING
}

type ServerInfo {
    name: String!
    url: String!
    version: String!
    openIdUrl: String!
}

type Episode {
    id: ID!
    number: Int
    show: Show
    images: [Image!]
    season: Season
    metadata: [Metadata!]
    watchStatus: [WatchStatus!]
    mediaFile: [MediaFile!]
}

type Image {
    id: ID!
    path: String!
    type: String!
    language: String
    sourceUri: String
    show: Show
    blurHash: String
}

type MediaFile {
    id: ID!
    episodes: [Episode!]
    path: String!
    size: Float!
    durationInMilliseconds: Int
    mediaFileStreams: [MediaFileStream]
}

type MediaFileStream {
    id: ID!
    streamIndex: Int
    codecName: String!
    codecType: String!
    width: Int!
    height: Int!
    path: String!
    language: String
    title: String
}

type Metadata {
    id: ID!
    sourceUri: String
    language: String
    title: String
    description: String
}

type Movie {
    id: ID!
    name: String!
    releaseYear: Int!
    images: [Image!]
    metadata: [Metadata!]
    watchStatus: [WatchStatus!]
    mediaFile: [MediaFile!]
}

type PlayQueue {
    id: ID!
    currentItemId: String
    currentItemEpisode: Episode
    currentItemMovie: Movie
    playQueueItems: [PlayQueueItem!]
}

type PlayQueueItem {
    id: ID!
    itemId: String!
    type: String!
}

type Season {
    id: ID!
    episodes: [Episode!]
    show: Show!
    number: Int!
}

type ShowPage {
    content: [Show!]!
    totalPages: Int!
    totalElements: Int!
    number: Int!
    size: Int!
}

type Show {
    id: ID!
    name: String!
    releaseYear: Int!
    episodes: [Episode!]
    seasons: [Season!]
    images: [Image!]
    metadata: [Metadata!]
}

type WatchStatus {
    id: ID!
    playQueueItemId: String!
    episode: Episode
    movie: Movie
    watched: Boolean!
    progressInMilliseconds: Int!
}
